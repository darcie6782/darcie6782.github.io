<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-04-25T07:18:54+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Darcieâ€™s blog</title><subtitle>A website with blog posts and pages</subtitle><entry><title type="html">Memory game</title><link href="http://localhost:4000/2023/01/24/Memory-Game.html" rel="alternate" type="text/html" title="Memory game" /><published>2023-01-24T00:00:00+00:00</published><updated>2023-01-24T00:00:00+00:00</updated><id>http://localhost:4000/2023/01/24/Memory-Game</id><content type="html" xml:base="http://localhost:4000/2023/01/24/Memory-Game.html"><![CDATA[<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>Memory Game</title>
    <style>
        body {
            background-color: #506972;
            font-family: sans-serif;
        }
        .container {
            display: flex;
            flex-direction: row;
            justify-content: center;
            padding: 0 20px;
        }
        .container-inner {
            width: 100%;
            max-width: 1024px;
        }
        .vertical-space-manager {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            gap: 1rem;
        }
        .game-player {
            max-width: 100%;
            padding: 1rem;
            background-color: #F0F0F1;
            border-radius: 16px;
            overflow: hidden;
        }
        .game-title {
            text-align: center;
        }
        #game-description {
            text-align: center;
        }
        #start-button-container {
            width: 100%;
            display: flex;
            flex-direction: row;
            justify-content: center;
            margin-top: 2rem;
        }
        .start-button-container-disabled {
            opacity: 0;
            pointer-events: none;
        }
        #start-button {
            color: white;
            background-color: #11D66D;
            padding: 1rem 2rem;
            border: none;
            border-radius: 16px;
            cursor: pointer;
            transition: all 0.2s;
        }
        #start-button:hover {
            opacity: 0.7;
        }
        #current-level-info {
            margin-top: 1rem;
        }
        #current-level-number-display {
            text-align: center;
            margin-bottom: 2rem;
            transition: all 0.2s;
            opacity: 0;
        }
        .current-level-number-display-enabled {
            opacity: 1 !important;
        }
        #current-level-guesses-message {
            text-align: center;
            margin-bottom: 2rem;
        }
        #current-level-guesses-display {
            display: flex;
            flex-direction: row;
            justify-content: center;
            gap: 0.5rem;
        }
        .current-correct-guess-panel {
            flex: 1;
            aspect-ratio: 1;
            max-width: 10%;
            transition: all 0.2s;
            border-radius: 8px;
        }
        #random-panel-container {
            width: 100%;
            display: flex;
            flex-direction: row;
            justify-content: center;
            margin-top: 2rem;
        }
        #random-panel {
            width: 100%;
            max-width: 200px;
            aspect-ratio: 1;
            border-radius: 16px;
            /*transition: all 0.2s;*/
        }
        .random-panel-none {
            display: none;
        }
        #controls {
            margin-top: 1rem;
            transition: all 0.2s;
            opacity: 0;
            pointer-events: none;
        }
        .controls-enabled {
            opacity: 1 !important;
            pointer-events: all !important;
        }
        #controls-instructions {
            text-align: center;
            margin-bottom: 2rem;
        }
        #controls-btns-row {
            margin-top: 1rem;
            display: flex;
            flex-direction: row;
            gap: 1rem;
        }
        .controls-btn {
            flex: 1;
            aspect-ratio: 1;
            border-radius: 16px;
            cursor: pointer;
            transition: all 0.2s;
        }
        .controls-btn:hover {
            opacity: 0.7;
        }
        #game-over-container {
            margin-top: 1rem;
            display: none;
        }
        .game-over-container-visible {
            display: block !important;
        }
        #game-over-message {
            text-align: center;
            color: #FF4238;
        }
        #game-over-correct-solution {
            display: flex;
            flex-direction: row;
            justify-content: center;
            gap: 0.5rem;
        }
        .bg-red {
            background-color: #FF4238;
        }
        .bg-yellow {
            background-color: #FFEE3F;
        }
        .bg-green {
            background-color: #11D66D;
        }
        .bg-purple {
            background-color: #7859E6;
        }
    </style>
</head>

<body>
<div>
    <div class="container">
        <div class="container-inner">
            <div class="vertical-space-manager">
                <div>
                </div>
                <div class="game-player">
                    <h1 class="game-title">Memory Game</h1>
                    <h5 id="game-description">
                        Click "Start Game" and try to remember the colors you see!<br /><br />
                        Each level is randomized from the prvevious &amp; gets faster &amp; faster!
                    </h5>
                    <div id="start-button-container">
                        <button id="start-button">
                            Start Game
                        </button>
                    </div>
                    <div id="current-level-info">
                        <div>
                            <h3 id="current-level-number-display"></h3>
                        </div>
                        <div>
                            <h3 id="current-level-guesses-message"></h3>
                            <div id="current-level-guesses-display">
                            </div>
                        </div>
                    </div>
                    <div id="random-panel-container">
                        <div id="random-panel">
                        </div>
                    </div>
                    <div id="controls">
                        <div>
                            <h3 id="controls-instructions">
                                Click the colors in the order they appeared
                            </h3>
                        </div>
                        <div id="controls-btns-row">
                            <div id="controls-btn-red" class="controls-btn bg-red">
                            </div>
                            <div id="controls-btn-yellow" class="controls-btn bg-yellow">
                            </div>
                            <div id="controls-btn-green" class="controls-btn bg-green">
                            </div>
                            <div id="controls-btn-purple" class="controls-btn bg-purple">
                            </div>
                        </div>
                    </div>
                    <div id="game-over-container">
                        <h2 id="game-over-message">
                            Game Over!<br /><br />
                            Click "Start Game" to play again.<br /><br />
                            Correct solution below:
                        </h2>
                        <div id="game-over-correct-solution">
                        </div>
                    </div>
                </div>
                <div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    /* I wrote this all during a flight, so don't critique it too hard! */

    console.log("Not trying to cheat, are you?");

    let levelFlashingInProgress = false;
    let level = 0;
    const baseRounds = 4;
    const baseTime = 1000;
    const levelSpeedMod = 65;

    let currentBg;
    let currentLevelBgs = [];
    let currentLevelGuesses = [];
    let currentIteration = 0;

    const startButtonContainer = document.getElementById("start-button-container");
    const startButton = document.getElementById("start-button");
    const currentLevelNumberDisplay = document.getElementById("current-level-number-display");
    const currentLevelGuessesMessage = document.getElementById("current-level-guesses-message");
    const currentLevelGuessesDisplay = document.getElementById("current-level-guesses-display");
    const randomPanel = document.getElementById("random-panel");
    const controls = document.getElementById("controls");
    const gameOverContainer = document.getElementById("game-over-container");
    const gameOverCorrectSolution = document.getElementById("game-over-correct-solution");

    const controlsBtnRed = document.getElementById("controls-btn-red");
    const controlsBtnYellow = document.getElementById("controls-btn-yellow");
    const controlsBtnGreen = document.getElementById("controls-btn-green");
    const controlsBtnPurple = document.getElementById("controls-btn-purple");

    startButton.addEventListener("click", startLevel);

    controlsBtnRed.addEventListener("click", guessColor("bg-red"));
    controlsBtnYellow.addEventListener("click", guessColor("bg-yellow"));
    controlsBtnGreen.addEventListener("click", guessColor("bg-green"));
    controlsBtnPurple.addEventListener("click", guessColor("bg-purple"));

    function getRandomNumberInclusive(lower, upper) {
        return Math.floor(Math.random() * (upper + 1) - lower);
    }

    // Map the numbers to classes for the random panel
    function getClassNameFromNumber(number) {
        switch(number) {
            case 0:
                return "bg-red";
            case 1:
                return "bg-yellow";
            case 2:
                return "bg-green";
            case 3:
            default:
                return "bg-purple";
        }
    }

    function startLevel() {
        if (levelFlashingInProgress) {
            return;
        }

        levelFlashingInProgress = true;
        // clear the correct guesses section
        currentLevelGuessesMessage.innerText = "";
        currentLevelGuessesDisplay.innerHTML = "";
        startButtonContainer.classList.add("start-button-container-disabled");
        gameOverContainer.classList.remove("game-over-container-visible");
        randomPanel.classList.remove("random-panel-none");
        currentLevelNumberDisplay.innerText = `Current Level: ${level + 1}`;
        currentLevelNumberDisplay.classList.add("current-level-number-display-enabled")

        const intervalSpeed = baseTime - (level * levelSpeedMod * (((level * 100) / 1000) + 1));

        let workingClassName;

        // Start the level, or "flashing"
        const flashingInterval =  setInterval(() => {
            if (workingClassName) {
                randomPanel.classList.remove(workingClassName); // Remove the previous color of the flashing div
            }

            workingClassName = getNewClass(); // generate a new class
            currentBg = workingClassName; // save the new class for reference
            currentLevelBgs.push(currentBg);
            randomPanel.classList.add(workingClassName); // add the new class to the flashing div
            currentIteration++;

            if (currentIteration === level + baseRounds) {
                clearInterval(flashingInterval);
                setTimeout(() => {
                    levelFlashingInProgress = false;
                    preparePlayingFieldForLevel();
                }, intervalSpeed);
            }
        }, intervalSpeed); // increments a little bit faster each level
    }

    function preparePlayingFieldForLevel() {
        // console.log(currentLevelBgs);
        randomPanel.classList.forEach(c => randomPanel.classList.remove(c));
        randomPanel.classList.add("random-panel-none");
        controls.classList.add("controls-enabled");
        currentLevelGuessesMessage.innerText = getCurrentCorrectGuessesMessage();
    }

    function guessColor(color) {
        return () => {
            if (color === currentLevelBgs[currentLevelGuesses.length]) {
                currentLevelGuesses.push(color);
                currentLevelGuessesMessage.innerText = getCurrentCorrectGuessesMessage();
                getNewCurrentCorrectGuessesDisplay(color, currentLevelGuessesDisplay);

                if (currentLevelGuesses.length === currentLevelBgs.length) {
                    // clear the controls
                    controls.classList.remove("controls-enabled");

                    setTimeout(() => {
                        // reset a whole ton of variables
                        currentBg = null;
                        currentLevelBgs = [];
                        currentLevelGuesses = [];
                        currentIteration = 0;

                        // clear the correct guesses section
                        currentLevelGuessesMessage.innerText = "";
                        currentLevelGuessesDisplay.innerHTML = "";

                        // increment the level
                        level++;

                        // begin again
                        startLevel();
                    }, 1000);
                }
            } else {
                console.log("you lose! (But there's really no winning, is there?)");
                gameOverContainer.classList.add("game-over-container-visible");
                randomPanel.classList.add("random-panel-none");
                currentLevelBgs.forEach(c => getNewCurrentCorrectGuessesDisplay(c, gameOverCorrectSolution));
                controls.classList.remove("controls-enabled");
                startButtonContainer.classList.remove("start-button-container-disabled");
                currentBg = null;
                currentLevelBgs = [];
                currentLevelGuesses = [];
                currentIteration = 0;
                level = 0;
            }
        }
    }

    function getCurrentCorrectGuessesMessage() {
        return `Current Correct Guesses: ${currentLevelGuesses.length}/${currentLevelBgs.length}`;
    }

    function getNewCurrentCorrectGuessesDisplay(className, parent) {
        const newPanel = document.createElement("div");
        newPanel.classList.add("current-correct-guess-panel");
        newPanel.classList.add(className);
        parent.append(newPanel);
    }

    function getNewClass() {
        const classNumber = getRandomNumberInclusive(0, 3);
        let workingClassName = getClassNameFromNumber(classNumber);

        if (currentBg === workingClassName) {
            workingClassName = getNewClass();
        }

        return workingClassName;
    }
</script>
</body>
</html>]]></content><author><name></name></author><category term="Project" /><summary type="html"><![CDATA[Memory Game]]></summary></entry><entry><title type="html">Happy Luna New Year</title><link href="http://localhost:4000/2023/01/21/Luna-New-Year.html" rel="alternate" type="text/html" title="Happy Luna New Year" /><published>2023-01-21T00:00:00+00:00</published><updated>2023-01-21T00:00:00+00:00</updated><id>http://localhost:4000/2023/01/21/Luna-New-Year</id><content type="html" xml:base="http://localhost:4000/2023/01/21/Luna-New-Year.html"><![CDATA[<html>
<body>
<svg width="800" height="600" xmlns="http://www.w3.org/2000/svg" style="vector-effect: non-scaling-stroke;">
 <g id="Layer_1">
  <title></title>
  <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_2" y2="99.99998" x2="183.33332" y1="209.52379" x1="22.61904" stroke="#000000" fill="none" />
  <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_3" y2="101.19046" x2="180.95237" y1="17.85712" x1="370.23808" stroke="#000000" fill="none" />
  <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_4" y2="299.99995" x2="164.03509" y1="203.50873" x1="21.05265" stroke="#000000" fill="none" />
  <line style="--darkreader-inline-stroke: #8c8273;" stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_5" y2="297.04363" x2="162.06842" y1="390.32445" x1="201.5241" stroke="#000000" fill="none" />
  <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_6" y2="366.99429" x2="192.11765" y1="415.2701" x1="165.51669" stroke="#000000" fill="none" />
  <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_7" y2="386.20609" x2="200.49202" y1="415.76271" x1="165.02408" stroke="#000000" fill="none" />
  <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_8" y2="197.62831" x2="299.03277" y1="481.27988" x1="149.75316" stroke="#000000" fill="none" />
  <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_9" y2="479.80205" x2="150.24577" y1="436.45234" x1="265.02397" stroke="#000000" fill="none" />
  <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_10" y2="439.5017" x2="264.65202" y1="197.0877" x1="299.30226" stroke="#000000" fill="none" />
  <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_11" y2="231.23571" x2="161.0832" y1="299.50669" x1="161.0832" stroke="#000000" fill="none" />
  <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_12" y2="232.39055" x2="161.55158" y1="106.40346" x1="200.49202" stroke="#000000" fill="none" />
  <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_13" y2="231.52647" x2="162.56103" y1="207.38856" x1="21.18188" stroke="#000000" fill="none" />
  <path id="svg_14" d="m281.14283,147.83118l-119.61548,82.45165" opacity="undefined" stroke-linecap="undefined" stroke-linejoin="undefined" stroke="#000000" fill="none" />
  <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_15" y2="231.32461" x2="160.3483" y1="197.53636" x1="300.49191" stroke="#000000" fill="none" />
  <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_16" y2="149.75316" x2="281.77272" y1="104.92563" x1="200.98463" stroke="#000000" fill="none" />
  <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_17" y2="169.45757" x2="306.89584" y1="197.98211" x1="298.97717" stroke="#000000" fill="none" />
  <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_18" y2="171.5007" x2="307.22695" y1="148.27533" x1="278.32444" stroke="#000000" fill="none" />
  <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_19" y2="149.26055" x2="278.81705" y1="129.48345" x1="320.76162" stroke="#000000" fill="none" />
  <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_20" y2="129.55614" x2="321.18154" y1="170.9354" x1="306.40323" stroke="#000000" fill="none" />
  <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_23" y2="62.16091" x2="449.40237" y1="130.90937" x1="319.04872" stroke="#000000" fill="none" />
  <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_24" y2="148.87783" x2="280.02294" y1="85.85698" x1="249.08765" stroke="#000000" fill="none" />
  <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_25" y2="29.00932" x2="387.18901" y1="106.77085" x1="200.00003" stroke="#000000" fill="none" />
  <path style="--darkreader-inline-stroke: #e8e6e3;" id="svg_26" d="m370.31254,18.80554l-9.8298,23.36096" opacity="undefined" stroke-linecap="undefined" stroke-linejoin="undefined" stroke="#000000" fill="none" />
  <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_27" y2="18.22917" x2="370.83337" y1="43.75001" x1="444.79171" stroke="#000000" fill="none" />
  <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_28" y2="63.17541" x2="449.29285" y1="29.16667" x1="385.93754" stroke="#000000" fill="none" />
  <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_29" y2="62.50001" x2="449.89883" y1="62.21337" x1="306.25003" stroke="#000000" fill="none" />
  <path id="svg_37" d="m480.72921,281.25001" opacity="NaN" stroke="#000000" fill="#000" />
  <path id="svg_39" d="m526.04172,344.79169" opacity="NaN" stroke="#000000" fill="#000" />
  <line id="svg_40" y2="343.22919" x2="481.77088" y1="196.87501" x1="297.9167" stroke="#000000" fill="none" />
  <line id="svg_41" y2="342.70835" x2="482.81255" y1="509.37503" x1="504.16672" stroke="#000000" fill="none" />
  <line id="svg_42" y2="344.06104" x2="480.91464" y1="327.83838" x1="514.06255" stroke="#000000" fill="none" />
  <path id="svg_46" d="m515.28962,325.38158" opacity="NaN" stroke="#000000" fill="#000" />
  <line id="svg_47" y2="340.67208" x2="534.24984" y1="327.52225" x1="509.78504" stroke="#000000" fill="none" />
  <line id="svg_48" y2="338.83722" x2="532.41498" y1="363.91365" x1="545.56482" stroke="#000000" fill="none" />
  <line id="svg_49" y2="363.30203" x2="546.48225" y1="394.49465" x1="537.00214" stroke="#000000" fill="none" />
  <line id="svg_50" y2="391.74236" x2="540.36605" y1="431.19186" x1="491.13063" stroke="#000000" fill="none" />
  <line id="svg_51" y2="507.64438" x2="504.58627" y1="586.23756" x1="381.65062" stroke="#000000" fill="none" />
  <line style="--darkreader-inline-stroke: #8c8273;" id="svg_52" y2="585.83744" x2="382.96199" y1="419.57108" x1="265.74861" stroke="#000000" fill="none" />
  <line id="svg_53" y2="469.41812" x2="303.05744" y1="537.30795" x1="207.33889" stroke="#000000" fill="none" />
  <line style="--darkreader-inline-stroke: #8c8273;" id="svg_54" y2="536.69633" x2="207.33889" y1="529.03346" x1="264.44869" stroke="#000000" fill="none" />
  <line style="--darkreader-inline-stroke: #8c8273;" id="svg_55" y2="487.98441" x2="316.2249" y1="580.00942" x1="196.07679" stroke="#000000" fill="none" />
  <line style="--darkreader-inline-stroke: #8c8273;" id="svg_56" y2="579.81555" x2="196.02392" y1="585.32013" x1="382.56806" stroke="#000000" fill="none" />
  <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_57" y2="508.02181" x2="505.04103" y1="488.68415" x1="313.76079" stroke="#000000" fill="none" />
  <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_58" y2="490.14728" x2="314.38605" y1="343.48236" x1="482.09957" stroke="#000000" fill="none" />
  <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_59" y2="51.49546" x2="427.57772" y1="42.49016" x1="444.59822" stroke="#000000" fill="none" />
  <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_65" y2="107.25723" x2="203.04114" y1="100.6999" x1="181.49562" stroke="#000000" fill="none" />
 </g>
</svg>
</body>
</html>]]></content><author><name></name></author><category term="newyear" /><category term="holiday" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">DSE test countdown</title><link href="http://localhost:4000/post/2023/01/12/Count-down.html" rel="alternate" type="text/html" title="DSE test countdown" /><published>2023-01-12T00:00:00+00:00</published><updated>2023-01-12T00:00:00+00:00</updated><id>http://localhost:4000/post/2023/01/12/Count-down</id><content type="html" xml:base="http://localhost:4000/post/2023/01/12/Count-down.html"><![CDATA[<html>
    <body>
    <script type="text/javascript">
        function changeTime(date, name) {
            var c = new Date(date).getTime();
            var delay = setInterval(function(){
                var n = new Date().getTime();
                var r = c - n;
                var d = Math.floor(r / (1000 * 60 * 60 * 24));
                var h = Math.floor((r % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                var m = Math.floor((r % (1000 * 60 * 60)) / (1000 * 60));
                var s = Math.floor((r % (1000 * 60)) / 1000);
                document.getElementById(name).innerHTML = d + "D " + h + "H " + m + "M " + s + "S"
            },1000)
        }
        changeTime("Apr 25, 2023 08:30:00","zh12");
        changeTime("Apr 26, 2023 09:15:00","zh3");
        changeTime("Apr 27, 2023 08:30:00","ts");
        changeTime("May 10, 2023 08:30:00","zs");
        changeTime("May 15, 2023 08:30:00","ss");
    </script>
    <h2>English Language 1,2</h2>
    <p>21st April 2023</p>
    <p style="color:red">FINISHED</p>
    <h2>English Language 3 (Listening and Integrated Skills)</h2>
    <p>22rd April 2023
    <p style="color:red">FINISHED</p>
    <h2>Mathematics Compulsory Part 1,2</h2>
    <p>24th April 2023</p>
    <p style="color:red">FINISHED</p>
    <h2>Chinese Language 1,2</h2>
    <p>25th April 2023</p>
    <p id="zh12">0D 0H 0M 0S</p>
    <h2>Chinese Language 3 (Listening and Integrated Skills)</h2>
    <p>26th April 2023</p>
    <p id="zh3">0D 0H 0M 0S</p>
    <h2>Liberal Studies 1,2</h2>
    <p>27th April 2023</p>
    <p id="ts">0D 0H 0M 0S</p>
    <h2>Chinese History 1,2</h2>
    <p>10th May 2023</p>
    <p id="zs">0D 0H 0M 0S</p>
    <h2>History 1,2</h2>
    <p>15th May 2023</p>
    <p id="ss">0D 0H 0M 0S</p>
</p></body></html>]]></content><author><name></name></author><category term="post" /><category term="countdown" /><category term="dse" /><summary type="html"><![CDATA[English Language 1,2 21st April 2023 FINISHED English Language 3 (Listening and Integrated Skills) 22rd April 2023 FINISHED Mathematics Compulsory Part 1,2 24th April 2023 FINISHED Chinese Language 1,2 25th April 2023 0D 0H 0M 0S Chinese Language 3 (Listening and Integrated Skills) 26th April 2023 0D 0H 0M 0S Liberal Studies 1,2 27th April 2023 0D 0H 0M 0S Chinese History 1,2 10th May 2023 0D 0H 0M 0S History 1,2 15th May 2023 0D 0H 0M 0S]]></summary></entry><entry><title type="html">Establish blog</title><link href="http://localhost:4000/demo/2023/01/08/Establish-blog.html" rel="alternate" type="text/html" title="Establish blog" /><published>2023-01-08T00:00:00+00:00</published><updated>2023-01-08T00:00:00+00:00</updated><id>http://localhost:4000/demo/2023/01/08/Establish-blog</id><content type="html" xml:base="http://localhost:4000/demo/2023/01/08/Establish-blog.html"><![CDATA[<h1 id="establish-blog">Establish blog</h1>

<p>This website is established in 8 Janauary 2023.</p>]]></content><author><name></name></author><category term="Demo" /><category term="record" /><summary type="html"><![CDATA[Establish blog]]></summary></entry></feed>